<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<title>Coupon Management</title>
<link rel="stylesheet" href="/admin/admin.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
</head>

<body>
	<div class="container-scroller">
		<!-- Sidebar -->
		<%- include('./layout/sidebar') %>

		<div class="container my-4">
			<h2>Offer Management</h2>
			<button class="btn btn-primary my-3" data-bs-toggle="modal" data-bs-target="#addOfferModal">ADD OFFER</button>

			<table class="table table-bordered">
				<thead>
					<tr>
						<th>Name</th>
						<th>Type</th>
						<th>Discount</th>
						<th>Start Date</th>
						<th>End Date</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody id="offerTableBody">
					<!-- Rows will be dynamically loaded -->
				</tbody>
			</table>

			<!-- Add Offer Modal -->
			<div class="modal fade" id="addOfferModal" tabindex="-1" aria-labelledby="addOfferModalLabel" aria-hidden="true">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="addOfferModalLabel">Add Offer</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							<form id="offerForm">
								<div class="mb-3">
									<label for="offerName" class="form-label">Offer Name</label>
									<input type="text" class="form-control" id="offerName" name="name" required>
									<div class="invalid-feedback">Please provide a valid offer name.</div>
								</div>
								<div class="mb-3">
									<label for="offerType" class="form-label">Type</label>
									<select class="form-select" id="offerType" name="type" required>
										<option value="">Select Type</option>
										<option value="product">Product</option>
										<option value="category">Category</option>
									</select>
									<div class="invalid-feedback">Please select a type.</div>
								</div>
								<div class="mb-3" id="categoryOrProductField">
									<!-- Dropdown for products or categories will load dynamically here -->
								</div>
								<div class="mb-3">
									<label for="discountType" class="form-label">Discount Type</label>
									<select class="form-select" id="discountType" name="discountType" required>
										<option value="">Select Discount Type</option>
										<option value="percentage">Percentage</option>
										<option value="fixed">Fixed Amount</option>
									</select>
									<div class="invalid-feedback">Please select a discount type.</div>
								</div>
								<div class="mb-3">
									<label for="discountValue" class="form-label">Discount Value</label>
									<input type="number" class="form-control" id="discountValue" name="discountValue" required>
									<div class="invalid-feedback">Please enter a discount value.</div>
								</div>
								<div class="mb-3">
									<label for="startDate" class="form-label">Start Date</label>
									<input type="date" class="form-control" id="startDate" name="startDate" required>
									<div class="invalid-feedback">Please select a start date.</div>
								</div>
								<div class="mb-3">
									<label for="endDate" class="form-label">End Date</label>
									<input type="date" class="form-control" id="endDate" name="endDate" required>
									<div class="invalid-feedback">Please select an end date later than the start date.</div>
								</div>
								<div class="mb-3">
									<label for="description" class="form-label">Description</label>
									<textarea class="form-control" id="description" name="description" rows="3"></textarea>
									<div class="invalid-feedback">Please enter a description.</div>
								</div>
								<button type="submit" class="btn btn-primary">Save Offer</button>
							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

	<script>
		// setTimeout(() => {
		// async function loadOptions(apiUrl, elementId) {
		// 	try {
		// 		const response = await fetch(apiUrl);
		// 		const data = await response.json();
		// 		const options = data.map(item => `<option value="${item._id}">${item.name}</option>`);
		// 		document.getElementById(elementId).innerHTML = '<option value="">Select</option>' + options.join('');
		// 	} catch (error) {
		// 		console.error('Error loading options:', error);
		// 	}
		// }
		// }, 0)

		// async function edit(event) {
		// 	const id = event.target.getAttribute("data-id");

		// 	try {
		// 		// Fetch specific offer details
		// 		const response = await fetch(`/admin/offerManagement/getOffer/${id}`);
		// 		if(!response.ok) {
		// 			throw new Error('Failed to fetch offer details');
		// 		}

		// 		const data = await response.json();
		// 		const offer = data.offer
		// 		console.log(offer);

		// 		// Populate modal fields with the offer details
		// 		document.getElementById('offerName').value = offer.name;
		// 		document.getElementById('offerType').value = offer.type;
		// 		document.getElementById('discountType').value = offer.discountType;
		// 		document.getElementById('discountValue').value = offer.discountValue;
		// 		document.getElementById('startDate').value = offer.startDate.split('T')[0]; // Format date
		// 		document.getElementById('endDate').value = offer.endDate.split('T')[0];
		// 		document.getElementById('status').value = offer.status;
		// 		document.getElementById('description').value = offer.description;

		// 		// Load category/product options dynamically if needed
		// 		const categoryOrProductField = document.getElementById('categoryOrProductField');
		// 		if(offer.type === 'product') {
		// 			// await loadOptions('/admin/offerManagement/getProducts', 'product');
		// 			const response = await fetch('/admin/offerManagement/getProducts');
		// 			const data = await response.json();
		// 			const options = data.map(item => `<option value="${item._id}">${item.name}</option>`);
		// 			document.getElementById('product').innerHTML = '<option value="">Select</option>' + options.join('');
		// 			document.getElementById('product').value = offer.productId;
		// 		} else if(offer.type === 'category') {
		// 			// await loadOptions('/admin/offerManagement/getCategories', 'category');
		// 			const response = await fetch('/admin/offerManagement/getCategories');
		// 			const data = await response.json();
		// 			console.log(data);

		// 			const options = data.map(item => `<option value="${item._id}">${item.name}</option>`);
		// 			document.getElementById('category').innerHTML = '<option value="">Select</option>' + options.join('');
		// 			document.getElementById('category').value = offer.categoryId;
		// 		}

		// 		// Change modal title and button text
		// 		document.getElementById("addOfferModalLabel").textContent = "Edit Offer";
		// 		const saveButton = document.querySelector("#offerForm button[type='submit']");
		// 		saveButton.textContent = "Update Offer";

		// 		// Store offer ID in the modal for the update action
		// 		document.getElementById('offerForm').setAttribute('data-id', id);

		// 		// Show the modal
		// 		const modal = new bootstrap.Modal(document.getElementById('addOfferModal'));
		// 		modal.show();

		// 		// Attach submit event for updating the offer
		// 		const offerForm = document.getElementById("offerForm");
		// 		offerForm.onsubmit = async (submitEvent) => {
		// 			submitEvent.preventDefault();

		// 			// Prepare form data
		// 			const formData = new FormData(offerForm);
		// 			const offerDetails = {};
		// 			formData.forEach((value, key) => {
		// 				offerDetails[key] = value;
		// 			});

		// 			try {
		// 				const updateResponse = await fetch(`/admin/offerManagement/update/${id}`, {
		// 					method: "PUT",
		// 					headers: {
		// 						"Content-Type": "application/json"
		// 					},
		// 					body: JSON.stringify(offerDetails)
		// 				});

		// 				if(!updateResponse.ok) {
		// 					throw new Error("Failed to update offer");
		// 				}

		// 				// Success message using SweetAlert2
		// 				Swal.fire({
		// 					icon: "success",
		// 					title: "Offer Updated",
		// 					text: "The offer has been successfully updated.",
		// 					confirmButtonText: "OK"
		// 				});

		// 				// Hide the modal
		// 				modal.hide();

		// 				// Optionally, reload the table or update UI dynamically
		// 				// Example: reloadOffersTable();

		// 			} catch (error) {
		// 				console.error("Error updating offer:", error);
		// 				Swal.fire({
		// 					icon: "error",
		// 					title: "Update Failed",
		// 					text: "An error occurred while updating the offer. Please try again."
		// 				});
		// 			}
		// 		};

		// 	} catch (error) {
		// 		console.error('Error fetching offer details:', error);
		// 		alert('Failed to load offer details. Please try again.');
		// 	}
		// }

		// async function deleteOffer(event) {
		// 	const button = event.target;
		// 	const id = button.getAttribute('data-id');
		// 	console.log('Delete button clicked for ID:', id);

		// 	const confirmation = await Swal.fire({
		// 		title: 'Are you sure?',
		// 		text: "You won't be able to revert this!",
		// 		icon: 'warning',
		// 		showCancelButton: true,
		// 		confirmButtonColor: '#3085d6',
		// 		cancelButtonColor: '#d33',
		// 		confirmButtonText: 'Yes, delete it!',
		// 		cancelButtonText: 'Cancel',
		// 	});

		// 	if(!confirmation.isConfirmed) {
		// 		return;
		// 	}

		// 	try {
		// 		const response = await fetch(`/admin/offerManagement/delete/${id}`, {
		// 			method: 'DELETE',
		// 		});

		// 		if(response.ok) {
		// 			await Swal.fire({
		// 				icon: 'success',
		// 				title: 'Deleted!',
		// 				text: 'Offer deleted successfully!',
		// 				timer: 2000,
		// 				showConfirmButton: false,
		// 			});
		// 			await fetchOffers(); // Refresh the offer table
		// 		} else {
		// 			const errorData = await response.json();
		// 			await Swal.fire({
		// 				icon: 'error',
		// 				title: 'Error!',
		// 				text: errorData.message,
		// 			});
		// 		}
		// 	} catch (error) {
		// 		console.error('Error deleting offer:', error);
		// 		await Swal.fire({
		// 			icon: 'error',
		// 			title: 'Error!',
		// 			text: 'An error occurred while deleting the offer. Please try again.',
		// 		});
		// 	}
		// }



		document.addEventListener('DOMContentLoaded', () => {
			const offerType = document.getElementById('offerType');
			const categoryOrProductField = document.getElementById('categoryOrProductField');
			const offerTableBody = document.getElementById('offerTableBody');

			async function fetchOffers() {
				try {
					const response = await fetch('/admin/offerManagement/get');
					const data = await response.json();
					const offers = data.offers;
					if(offers.length === 0) {
						offerTableBody.innerHTML = '<tr><td colspan="6" rowspan="3" class="text-center bg-gradient-danger">No offers found</td></tr>';
						return;
					}
					offerTableBody.innerHTML = offers.map(offer => `
                        <tr>
                            <td>${offer.name}</td>
                            <td>${offer.type}</td>
                            <td>${offer.discountType === 'percentage' ? offer.discountValue + ' %' : '₹ ' + offer.discountValue}</td>
                            <td>${offer.startDate}</td>
                            <td>${offer.endDate}</td>
                            <td>
    							<button class="btn btn-danger btn-sm delete-btn" data-id="${offer._id}">Delete</button>
                            </td>
                        </tr>
                        `).join('');

				} catch (error) {
					console.error('Error loading offers:', error);
				}
			}
			async function loadOptions(apiUrl, elementId) {
				try {
					const response = await fetch(apiUrl);
					const data = await response.json();
					const options = data.map(item => `<option value="${item._id}">${item.name}</option>`);
					document.getElementById(elementId).innerHTML = '<option value="">Select</option>' + options.join('');
				} catch (error) {
					console.error('Error loading options:', error);
				}
			}

			async function deleteOffer(event) {
				const button = event.target;
				const id = button.getAttribute('data-id');
				console.log('Delete button clicked for ID:', id);

				const confirmation = await Swal.fire({
					title: 'Are you sure?',
					text: "You won't be able to revert this!",
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!',
					cancelButtonText: 'Cancel',
				});

				if(!confirmation.isConfirmed) {
					return;
				}

				try {
					const response = await fetch(`/admin/offerManagement/delete/${id}`, {
						method: 'DELETE',
					});

					if(response.ok) {
						await Swal.fire({
							icon: 'success',
							title: 'Deleted!',
							text: 'Offer deleted successfully!',
							timer: 2000,
							showConfirmButton: false,
						});
						await fetchOffers(); // Refresh the offer table
					} else {
						const errorData = await response.json();
						await Swal.fire({
							icon: 'error',
							title: 'Error!',
							text: errorData.message,
						});
					}
				} catch (error) {
					console.error('Error deleting offer:', error);
					await Swal.fire({
						icon: 'error',
						title: 'Error!',
						text: 'An error occurred while deleting the offer. Please try again.',
					});
				}
			}


			offerType.addEventListener('change', async () => {
				const selectedType = offerType.value;
				let fieldHtml = '';

				if(selectedType === 'product') {
					fieldHtml = `
                        <label for="product" class="form-label">Select Product</label>
                        <select class="form-select" id="product" name="productId">
                            <option value="">Loading...</option>
                        </select>
                    `;
					categoryOrProductField.innerHTML = fieldHtml;
					await loadOptions('/admin/offerManagement/getProducts', 'product');
				} else if(selectedType === 'category') {
					fieldHtml = `
                        <label for="category" class="form-label">Select Category</label>
                        <select class="form-select" id="category" name="categoryId">
                            <option value="">Loading...</option>
                        </select>
                    `;
					categoryOrProductField.innerHTML = fieldHtml;
					await loadOptions('/admin/offerManagement/getCategories', 'category');
				}
			});

			document.getElementById('offerForm').addEventListener('submit', async (e) => {
				e.preventDefault();
				const form = e.target;
				if(!form.checkValidity()) {
					e.stopPropagation();
					form.classList.add('was-validated');
					return;
				}
				const formData = new FormData(e.target);
				const formObject = Object.fromEntries(formData.entries());

				const startDate = new Date(formObject.startDate);
				const endDate = new Date(formObject.endDate);
				if(endDate < startDate) {
					alert('End date cannot be earlier than start date.');
					return;
				}

				try {
					console.log(formObject);

					const response = await fetch('/admin/offerManagement/create', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(formObject),
					});

					console.log(response)
					if(response.ok) {
						alert('Offer added successfully!');
						await fetchOffers();
						document.getElementById('offerForm').reset();
						document.querySelector('#addOfferModal .btn-close').click();
					} else {
						const errorData = await response.json();
						alert(`Error: ${errorData.message}`);
					}
				} catch (error) {
					console.error('Error submitting form:', error);
					alert('An error occurred while adding the offer.');
				}
			});

			offerTableBody.addEventListener('click', (event) => {
				if(event.target.classList.contains('delete-btn')) {
					deleteOffer(event);
				}
			});

			fetchOffers();
		});
	</script>

	<!-- Scripts -->
	<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

	<!-- Include SweetAlert2 -->
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</body>

</html>