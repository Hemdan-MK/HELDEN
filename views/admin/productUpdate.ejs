<!DOCTYPE html>
<html lang="en">

<head>
<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<title>Product Update Panel</title>
<!-- Layout styles -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="/admin/admin.css">

<style>
	.modal-cropper {
		max-width: 90%;
		margin: 20px auto;
	}

	.crop-preview-container {
		max-height: 70vh;
		overflow: hidden;
		background-color: #f8f9fa;
		border-radius: 8px;
	}

	#cropModalImage {
		max-width: 100%;
		max-height: 60vh;
		display: block;
		margin: 0 auto;
	}

	.round-preview {
		width: 100%;
		max-width: 300px;
		height: 400px;
		object-fit: cover;
		border: 2px solid #dee2e6;
		border-radius: 8px;
		margin: 10px auto;
		display: block;
	}

	.image-upload-section {
		background: #fff;
		padding: 20px;
		border-radius: 8px;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		margin-bottom: 20px;
	}

	.delete-button {
		background-color: #dc3545;
		color: white;
		border: none;
		padding: 8px 16px;
		border-radius: 4px;
		margin-top: 10px;
		transition: background-color 0.2s;
	}

	.delete-button:hover {
		background-color: #c82333;
	}

	.modal-footer {
		border-top: 1px solid #dee2e6;
		padding: 1rem;
	}

	.cropper-view-box,
	.cropper-face {
		border-radius: 0;
	}


	/* //////////////////////////////////// */
	/* Overlay background */
	.overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.5);
		z-index: 999;
	}

	/* Centered modal container */
	.crop-container {
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		z-index: 1000;
		width: 80%;
		max-width: 500px;
		background: #121212;
		border-radius: 8px;
		border: 2px solid red;
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
		overflow: hidden;
		display: flex;
		flex-direction: column;
	}

	/* Modal header */
	.crop-header {
		padding: 10px 15px;
		background: #121212;
		border-bottom: 1px solid #121212;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	/* Modal body */
	.crop-preview-container {
		padding: 15px;
		text-align: center;
		overflow: hidden;
	}

	/* Modal footer */
	.crop-footer {
		padding: 10px 15px;
		display: flex;
		justify-content: flex-end;
		gap: 10px;
		background: #121212;
		border-top: 1px solid #121212;
	}

	/* Close button */
	.close-crop-btn {
		background: none;
		border: none;
		font-size: 18px;
		cursor: pointer;
		color: #d1d1d1;
	}
</style>

</head>

<body>
	<div class="sidebar">
		<div class="sidebar-brand">
			HELDEN
		</div>
		<ul class="nav flex-column mt-3">
			<li class="nav-item">
				<a class="nav-link" href="/admin/dashboard">Dashboard</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/admin/userManagement">User Management</a>
			</li>
			<li class="nav-item">
				<a class="nav-link active" href="/admin/productManagement">Product Management</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/admin/orderManagement">Order Management</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/admin/categoryManagement">Category Management</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/admin/couponManagement">Coupon Management</a>
			</li>
			<li class="nav-item mt-5">
				<a class="nav-link text-warning" href="/admin/logout">Logout</a>
			</li>
		</ul>
	</div>
	<div class="main-content">
		<!-- partial -->
		<div class="container-fluid">
			<!-- partial:partials/_navbar.html -->
			<nav class="navbar p-0 fixed-top d-flex flex-row">
			</nav>

			<!-- Product Update Form Section -->
			<div class="row p-3 w-100 h-100">
				<div class="col-12 grid-margin">
					<div class="card">
						<div class="card-body">
							<h4 class="card-title">Update Product</h4>
							<form class="updatePdt" id="updateProductForm" enctype="multipart/form-data">
								<!-- Hidden Fields -->
								<input type="hidden" id="productId" name="productId" value="<%= product.id %>">

								<!-- Basic Product Information -->
								<div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label for="productName" class="form-label">Product Name</label>
											<input type="text" class="form-control" id="productName" name="productName" value="<%= product.name %>">
											<p id="productNameError" class="text-danger" style="display:none;">Please enter a valid product name.</p>
										</div>
									</div>
								</div>

								<!-- Price Information -->
								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											<label for="productPrice" class="form-label">Price</label>
											<input type="number" class="form-control" id="productPrice" name="productPrice" value="<%= product.price %>">
											<p id="productPriceError" class="text-danger" style="display:none;">Please enter a valid price.</p>
										</div>
									</div>
									<div class="col-md-6">
										<div class="form-group">
											<label for="offerPrice" class="form-label">Offer Price</label>
											<input type="number" class="form-control" id="offerPrice" name="productOfferPrice" value="<%= product.offerPrice %>">
											<p id="offerPriceError" class="text-danger" style="display:none;">Please enter a valid offer price.</p>
										</div>
									</div>
								</div>


								<label>Product Images</label>
								<div class="d-flex justify-content-between flex-wrap">
									<% for(let i = 0; i < 4; i++) { %>
									<div class="image-upload-section text-center">
										<img id="roundPreview<%= i %>" class="round-preview" src="<%= product.images[i] || '/productUploads/default-product.png' %>" alt="Preview <%= i + 1 %>" />
										<input type="file" class="form-control mt-3" id="image<%= i %>" name="productImage<%= i + 1 %>" accept="image/*" onchange="openCropContainer(event, <%= i %>)" />
										<button type="button" class="delete-button mt-2" onclick="removeImagePreview(<%= i %>)">
											Remove Image
										</button>
									</div>
									<% } %>
								</div>

								<!-- Product Details -->
								<div class="form-group">
									<label for="productDescription" class="form-label">Description</label>
									<textarea class="form-control" id="productDescription" name="productDescription" rows="3"><%= product.description %></textarea>
									<p id="productDescriptionError" class="text-danger" style="display:none;">Please enter a product description.</p>
								</div>

								<!-- Additional Information -->
								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											<label for="productTags" class="form-label">Tags</label>
											<input type="text" class="form-control" id="productTags" name="productTags" placeholder="Comma separated" value="<%= product.tags %>">
										</div>
									</div>
									<div class="col-md-6">
										<div class="form-group">
											<label for="productBrand" class="form-label">Brand</label>
											<input type="text" class="form-control" id="productBrand" name="productBrand" value="<%= product.brand %>">
										</div>
									</div>
								</div>

								<!-- Warranty and Return Policy -->
								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											<label for="productWarranty" class="form-label">Warranty</label>
											<input type="text" class="form-control" id="productWarranty" name="productWarranty" placeholder="e.g., 1 year" value="<%= product.warranty %>">
										</div>
									</div>
									<div class="col-md-6">
										<div class="form-group">
											<label for="productReturnPolicy" class="form-label">Return Policy</label>
											<input type="text" class="form-control" id="productReturnPolicy" name="productReturnPolicy" placeholder="e.g., 30 days" value="<%= product.returnPolicy %>">
										</div>
									</div>
								</div>

								<!-- Category Selection -->
								<div class="form-group">
									<label for="productCategory" class="form-label">Category</label>
									<select class="form-control" id="productCategory" name="productCategory">
										<% categories.forEach(category => { %>
										<% console.log(category._id.equals(product.category._id)) %>
										<option value="<%= category._id %>" <%= category._id.equals(product.category._id) ? 'selected' : '' %>>
											<%= category.name %>
										</option>
										<% }) %>
									</select>
									<p id="productCategoryError" class="text-danger" style="display:none;">Please select a product category.</p>
								</div>

								<!-- TYPE -->
								<div class="form-group">
									<label for="productType" class="form-label">Select Type</label>
									<select class="form-control" id="productType" name="productType">
										<option value="TopWare" <%= product.productType === 'TopWare' ? 'selected' : '' %>>TopWare</option>
										<option value="BottomWare" <%= product.productType === 'BottomWare' ? 'selected' : '' %>>BottomWare</option>
									</select>
								</div>

								<!-- Stock Management -->
								<div class="row mt-3">
									<div class="col-12">
										<div class="form-group">
											<label class="form-label">Stock Management</label>
											<div id="stockManagementContainer" class="row g-3">

											</div>
											<input type="hidden" name="productStockManagement" id="productStockManagement" value="<%= JSON.stringify(product.stockManagement || []) %>">
										</div>
									</div>
								</div>

								<!-- Submit Button -->
								<div class="text-center">
									<button type="submit" id="Updatesubmit" class="btn btn-primary btn-submit mt-3 w-50">
										Update Product
									</button>
								</div>
							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>


	<!-- Modal for cropping
	<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg modal-dialog-centered modal-cropper">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closeCropModal()"></button>
				</div>
				<div class="modal-body p-0" >
					<div class="crop-preview-container" >
						<img id="cropModalImage" src="" alt="Crop Preview" />
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeCropModal()">Cancel</button>
					<button type="button" class="btn btn-primary" onclick="applyCrop()">Apply Crop</button>
				</div>
			</div>
		</div>
	</div> -->

	<div id="cropContainer" class="crop-container container-fluid" style="display: none;">
		<div class="crop-header">
			<h5>Crop Image</h5>
			<button type="button" class="close-crop-btn" onclick="closeCropContainer()">✖</button>
		</div>
		<div class="crop-preview-container">
			<img id="cropContainerImage" src="" alt="Crop Preview" />
		</div>
		<div class="crop-footer">
			<button type="button" class="btn btn-secondary" onclick="closeCropContainer()">Cancel</button>
			<button type="button" class="btn btn-primary" onclick="applyCrop()">Apply Crop</button>
		</div>
	</div>
	<div id="overlay" class="overlay" style="display: none;"></div>

	<script src="https://cdn.jsdelivr.net/npm/cropperjs"></script>

	<script>
		let cropper;
		let selectedFile;
		let selectedInput;
		let selectedPreview;

		function openCropContainer(event, index) {
			selectedFile = event.target.files[0];
			selectedInput = event.target;
			selectedPreview = document.getElementById(`roundPreview${index}`);

			if(selectedFile) {
				const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"];
				if(!allowedTypes.includes(selectedFile.type)) {
					Swal.fire({
						icon: 'warning',
						title: 'Invalid File!',
						text: 'Please select a valid image file (JPEG, PNG, GIF, or WebP).',
						confirmButtonColor: '#f8b400',
						confirmButtonText: 'OK'
					});
					event.target.value = "";
					return;
				}

				const containerImage = document.getElementById('cropContainerImage');
				containerImage.src = URL.createObjectURL(selectedFile);

				document.getElementById('cropContainer').style.display = 'block';

				containerImage.onload = function() {
					if(cropper) {
						cropper.destroy();
					}
					cropper = new Cropper(containerImage, {
						aspectRatio: 3 / 4,
						viewMode: 1,
						dragMode: 'move',
						autoCropArea: 1,
						restore: false,
						guides: true,
						center: true,
						highlight: false,
						cropBoxMovable: true,
						cropBoxResizable: true,
						toggleDragModeOnDblclick: false,
					});
				};
			}
		}

		function closeCropContainer() {
			if(cropper) {
				cropper.destroy();
			}
			document.getElementById('cropContainer').style.display = 'none';
		}

		function applyCrop() {
			if(!cropper) return;

			cropper.getCroppedCanvas({
				width: 600,
				height: 800,
				fillColor: '#fff',
				imageSmoothingEnabled: true,
				imageSmoothingQuality: 'high',
			}).toBlob((blob) => {
				const croppedUrl = URL.createObjectURL(blob);
				selectedPreview.src = croppedUrl;

				const file = new File([blob], selectedFile.name, {
					type: selectedFile.type
				});
				const dataTransfer = new DataTransfer();
				dataTransfer.items.add(file);
				selectedInput.files = dataTransfer.files;

				closeCropContainer();
			}, selectedFile.type, 0.9);
		}

		// function openCropModal(event, index) {
		// 	selectedFile = event.target.files[0];
		// 	selectedInput = event.target;
		// 	selectedPreview = document.getElementById(`roundPreview${index}`);

		// 	if(selectedFile) {
		// 		const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"];
		// 		if(!allowedTypes.includes(selectedFile.type)) {
		// 			Swal.fire({
		// 				icon: 'warning',
		// 				title: 'Invalid File!',
		// 				text: 'Please select a valid image file (JPEG, PNG, GIF, or WebP).',
		// 				confirmButtonColor: '#f8b400',
		// 				confirmButtonText: 'OK'
		// 			});
		// 			event.target.value = "";
		// 			return;
		// 		}

		// 		const modalImage = document.getElementById('cropModalImage');
		// 		modalImage.src = URL.createObjectURL(selectedFile);

		// 		cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
		// 		cropModal.show();

		// 		modalImage.onload = function() {
		// 			if(cropper) {
		// 				cropper.destroy();
		// 			}
		// 			cropper = new Cropper(modalImage, {
		// 				aspectRatio: 3 / 4,
		// 				viewMode: 1,
		// 				dragMode: 'move',
		// 				autoCropArea: 1,
		// 				restore: false,
		// 				guides: true,
		// 				center: true,
		// 				highlight: false,
		// 				cropBoxMovable: true,
		// 				cropBoxResizable: true,
		// 				toggleDragModeOnDblclick: false,
		// 			});
		// 			cropper.setCropBoxData({
		// 				left: 50, // Distance from the left edge
		// 				top: 50, // Distance from the top edge
		// 				width: 300, // Width of the crop box
		// 				height: 150, // Height of the crop box
		// 			});
		// 		};
		// 	}
		// }

		// function closeCropModal() {
		// 	if(cropper) {
		// 		cropper.destroy();
		// 	}
		// 	cropModal.hide();
		// }

		// function applyCrop() {
		// 	if(!cropper) return;

		// 	cropper.getCroppedCanvas({
		// 		width: 600,
		// 		height: 800,
		// 		fillColor: '#fff',
		// 		imageSmoothingEnabled: true,
		// 		imageSmoothingQuality: 'high',
		// 	}).toBlob((blob) => {
		// 		const croppedUrl = URL.createObjectURL(blob);
		// 		selectedPreview.src = croppedUrl;

		// 		const file = new File([blob], selectedFile.name, {
		// 			type: selectedFile.type
		// 		});
		// 		const dataTransfer = new DataTransfer();
		// 		dataTransfer.items.add(file);
		// 		selectedInput.files = dataTransfer.files;

		// 		closeCropModal();
		// 	}, selectedFile.type, 0.9);
		// }

		function removeImagePreview(index) {
			const preview = document.getElementById(`roundPreview${index}`);
			const input = document.getElementById(`image${index}`);
			console.log(_dirnam);

			preview.src = '/productUploads/default-product.png';
			input.value = '';
		}

		// Initialize Bootstrap tooltips
		document.addEventListener('DOMContentLoaded', function() {
			var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
			var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
				return new bootstrap.Tooltip(tooltipTriggerEl);
			});
		});
	</script>




	<script>
		// Handle form submission using fetch with PUT method
		document.getElementById('updateProductForm').addEventListener('submit', function(e) {
			event.preventDefault();

			// Clear previous error messages
			const errorMessages = document.querySelectorAll(".error-message");
			errorMessages.forEach((msg) => msg.remove());

			// Get form values
			const productId = document.getElementById("productId").value.trim();
			const productName = document.getElementById("productName").value.trim();
			const productPrice = parseFloat(document.getElementById("productPrice").value);
			const offerPrice = parseFloat(document.getElementById("offerPrice").value) || null;
			const productDescription = document.getElementById("productDescription").value.trim();
			const productTags = document.getElementById("productTags").value.trim();
			const productBrand = document.getElementById("productBrand").value.trim();
			const productWarranty = document.getElementById("productWarranty").value.trim();
			const productReturnPolicy = document.getElementById("productReturnPolicy").value.trim();
			const productCategory = document.getElementById("productCategory").value;
			const productType = document.getElementById("productType").value
			const productStockManagement = document.getElementById("productStockManagement").value;


			let hasError = false;


			function showError(inputId, message) {
				const inputElement = document.getElementById(inputId);


				if(!inputElement) {
					console.error(`Element with id "${inputId}" not found.`);
					return;
				}
				const error = document.createElement("p");
				error.classList.add("text-danger", "error-message");
				error.textContent = message;
				inputElement.parentElement.appendChild(error);
				hasError = true;
			}

			// Validate fields
			if(!productId) {
				console.error("Missing product ID. This field is required for updates.");
				hasError = true;
			}

			if(!productName) {
				showError("productName", "Product name is required.");
			}

			if(isNaN(productPrice) || productPrice <= 0) {
				showError("productPrice", "Please enter a valid price greater than zero.");
			}

			if(offerPrice !== null && (isNaN(offerPrice) || offerPrice >= productPrice)) {
				showError("offerPrice", "Offer price must be less than the original price.");
			}

			if(!productDescription) {
				showError("productDescription", "Product description is required.");
			}

			if(!productCategory) {
				showError("productCategory", "Please select a product category.");
			}

			if(productTags && productTags.split(",").length > 10) {
				showError("productTags", "You can add up to 10 tags only.");
			}

			if(productBrand && productBrand.length > 50) {
				showError("productBrand", "Brand name cannot exceed 50 characters.");
			}

			if(productWarranty && !/^\d+\s*(day|year|month)s?$/i.test(productWarranty)) {
				showError("productWarranty", "Warranty must be in the format (e.g., 1 year, 6 months).");
			}

			if(productReturnPolicy && !/^\d+\s*(day|month)s?$/i.test(productReturnPolicy)) {
				showError("productReturnPolicy", "Return policy must be in the format (e.g., 30 days, 1 month).");
			}

			// Validate stock management (if applicable)
			if(productStockManagement) {
				try {
					const stockData = JSON.parse(productStockManagement);
					if(!Array.isArray(stockData)) {
						throw new Error();
					}
					stockData.forEach((item) => {
						if(item.quantity < 0) {
							console.log(item.quantity);

							throw new Error();
						}
					});
				} catch {
					showError("productStockManagement", "Invalid stock management data. Please check your inputs.");
				}
			}

			if(hasError) {
				Swal.fire("Error", "Please fix the highlighted errors.", "error");
				return;
			}

			const formData = new FormData(this); // Collect form data

			fetch('/admin/productManagement/update', {
					method: 'PUT',
					body: formData
				})
				.then(response => response.json()) // Assuming server returns JSON
				.then(data => {
					if(data.success) {
						Swal.fire({
							icon: 'success', // Green checkmark icon for success
							title: 'Success!',
							text: 'Product updated successfully!',
							confirmButtonColor: '#28a745', // Green button for success
							confirmButtonText: 'OK'
						}).then(() => {

							window.location.href = '/admin/productManagement'; // Redirect to product list page
						})
					} else {
						Swal.fire({
							icon: 'error', // Red error icon
							title: 'Error!',
							text: 'Failed to update product. Please try again.',
							confirmButtonColor: '#d33', // Red button for error
							confirmButtonText: 'OK'
						});
					}
				})
				.catch(error => {
					console.error('Error:', error);
					alert('An error occurred. Please try again.');
				});
		});



		document.addEventListener('DOMContentLoaded', function() {
			const categorySelect = document.getElementById('productType');
			const stockContainer = document.getElementById('stockManagementContainer');
			const stockManagementInput = document.getElementById('productStockManagement');

			// Size configurations
			const sizeConfigs = {
				'bottomware': Array.from({
					length: 9
				}, (_, i) => (28 + (i * 2)).toString()),
				'topware': ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']
			};


			function createStockFields(category) {
				const productType = categorySelect.value.toLowerCase();
				console.log("THIS IS MY PRODUCT TYPE-->" + productType);




				// Get appropriate sizes
				const sizes = sizeConfigs[productType] || [];
				console.log("THIS IS MY SIZE-->" + sizes);

				// Get current stock data
				let currentStock = {};
				try {
					const stockData = JSON.parse(stockManagementInput.value);
					stockData.forEach(item => {
						currentStock[item.size] = item.quantity;
					});
				} catch (e) {
					console.error('Error parsing stock data:', e);
				}

				// Create HTML for stock inputs
				stockContainer.innerHTML = '';
				sizes.forEach(size => {
					const quantity = currentStock[size] || 0;
					const col = document.createElement('div');
					col.className = 'col-md-3 mb-3';
					col.innerHTML = `
        <div class="input-group">
          <span class="input-group-text">${size}</span>
          <input 
            type="number" 
            class="form-control stock-input" 
            data-size="${size}" 
            value="${quantity}"
            min="0"
            placeholder="Quantity"
          >
        </div>
      `;
					stockContainer.appendChild(col);
				});

				// Add change listeners to new inputs
				document.querySelectorAll('.stock-input').forEach(input => {
					input.addEventListener('change', updateStockManagement);
				});

				// Update hidden input
				updateStockManagement();
			}

			// Function to update hidden stock management input
			function updateStockManagement() {
				const stockData = [];
				document.querySelectorAll('.stock-input').forEach(input => {
					const quantity = parseInt(input.value) || 0;
					if(quantity >= 0) {
						stockData.push({
							size: input.dataset.size,
							quantity: quantity
						});
					}
				});
				stockManagementInput.value = JSON.stringify(stockData);
			}

			// Listen for category changes
			categorySelect.addEventListener('change', function() {
				createStockFields(this);
			});

			// Initialize stock fields with current category
			createStockFields(categorySelect);

			// Add change listeners to existing stock inputs
			document.querySelectorAll('.stock-input').forEach(input => {
				input.addEventListener('change', updateStockManagement);
			});


		});
	</script>

	<!-- Script links -->
	<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>