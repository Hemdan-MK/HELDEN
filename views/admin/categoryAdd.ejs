<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <title>Category Panel</title>
  <link rel="stylesheet" href="/admin/admin.css" />
  <link href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet" />
  <style>
    /* Circular input and preview styles */
    .photoSelectContainer {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      gap: 15px;
    }

    .inp-mid {
      align-content: center;
      justify-content: center;
      width: 100%;
      height: 100%;
    }


    .roundPhotoInput {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 150px;
      height: 150px;
      border: 5px solid #ffb700;
      border-radius: 50%;
      cursor: pointer;
      overflow: hidden;
      background-color: #f9f9f9;
      position: relative;
    }

    .roundPhotoInput img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: none;
      border-radius: 50%;
    }

    .roundPhotoInput:hover {
      border-color: #007bff;
    }

    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
      margin: 10% auto;
      padding: 20px 0;
      width: 60%;
      background: #2b3037;
      border-radius: 10px;
      text-align: center;
      position: relative;
    }

    .modal-content img {
      max-width: 100%;
      max-height: 400px;
    }

    .close {
      position: absolute;
      right: 10px;
      top: 10px;
      color: #aaa;
      font-size: 24px;
      cursor: pointer;
    }

    .close:hover {
      color: red;
    }
  </style>
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
  <div class="container-scroller">
    <%- include('./layout/sidebar') %>
      <div class="container-fluid page-body-wrapper">
        <div class="row p-3 w-100 h-100">
          <div class="col-12 grid-margin">
            <div class="card">
              <div class="card-body">
                <h4 class="card-title">Add New Category</h4>
                <form id="categoryForm" onsubmit="return false;">
                  <div class="form-group">
                    <label for="categoryName">Category Name</label>
                    <input type="text" class="form-control" id="categoryName" name="categoryName" required />
                  </div>
                  <div class="form-group photoSelectContainer">
                    <div class="roundPhotoInput" id="photoInputContainer">
                      <img id="roundPreview" alt="Preview" />
                      <input type="file" id="categoryImage" accept="image/*" class="inp-mid"
                        onchange="openCropModal(event)" />
                    </div>
                    <button type="button" class="delete-button" onclick="removeImagePreview()">Remove Image</button>
                  </div>
                  <div class="form-group">
                    <label for="categoryDescription">Description</label>
                    <input type="text" class="form-control" id="categoryDescription" name="categoryDescription"
                      required />
                  </div>
                  <div class="d-flex flex-column align-items-center">
                    <button type="submit" class="btn btn-primary mt-2 w-50" id="add-btn">Add</button>
                    <a href="/admin/categoryManagement" class="btn btn-secondary mt-3 w-50">Go to Category Page</a>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
  </div>

  <!-- Modal for cropping -->
  <div id="cropModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeCropModal()">&times;</span>
      <h4>Crop Your Image</h4>
      <img id="cropModalImage" alt="Crop Preview" />
      <button class="btn btn-success mt-3" onclick="applyCrop()">OK</button>
    </div>
  </div>

  <!-- Script links -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>

  <script>
    let cropper;
    let selectedFile;
    let croppedImageBlob = null; // Variable to store the cropped image

    function showAlert(title, text, icon) {
      Swal.fire({
        title: title,
        text: text,
        icon: icon, // 'success', 'error', 'warning', 'info', or 'question'
        background: '#6a1b9a', // Purple background
        color: '#ffffff', // White text color
        confirmButtonColor: '#ffb700', // Yellow confirm button
        customClass: {
          popup: 'swal-purple-popup', // Custom class for more styling
        },
      });
    }

    function openCropModal(event) {
      selectedFile = event.target.files[0];
      if (selectedFile) {
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        if (!allowedTypes.includes(selectedFile.type)) {
          showAlert('Validation Error', 'Please upload a valid image (JPEG, PNG, or GIF).', 'warning');
          event.target.value = ''; // Clear the file input
          return;
        }

        const modalImage = document.getElementById('cropModalImage');
        modalImage.src = URL.createObjectURL(selectedFile);
        document.getElementById('cropModal').style.display = 'block';

        // Initialize cropper
        if (cropper) cropper.destroy();
        cropper = new Cropper(modalImage, {
          aspectRatio: 1,
          viewMode: 1,
        });
      }
    }

    function closeCropModal() {
      document.getElementById('cropModal').style.display = 'none';
      if (cropper) cropper.destroy();
    }

    function applyCrop() {
      if (cropper) {
        cropper.getCroppedCanvas().toBlob((blob) => {
          croppedImageBlob = blob; // Store the cropped image in memory

          // Update the preview image
          const previewImage = document.getElementById('roundPreview');
          previewImage.src = URL.createObjectURL(blob);
          previewImage.style.display = 'block';

          closeCropModal();
        });
      }
    }

    function removeImagePreview() {
      const previewImage = document.getElementById('roundPreview');
      previewImage.style.display = 'none'; // Hide the preview image
      previewImage.src = ''; // Clear the preview image source
      document.getElementById('categoryImage').value = ''; // Reset file input
      croppedImageBlob = null; // Clear the stored cropped image

      if (cropper) cropper.destroy(); // Destroy the cropper instance if it exists
    }



    document.getElementById('add-btn').addEventListener('click', function (e) {
      e.preventDefault();

      // Validate form inputs
      const categoryName = document.getElementById('categoryName').value.trim();
      const categoryDescription = document.getElementById('categoryDescription').value.trim();
      const namePattern = /^[a-zA-Z0-9\& _-]{3,50}$/;

      if (!categoryName) {
        showAlert('Validation Error', 'Category Name is required.', 'warning');
        return;
      }
      if (!namePattern.test(categoryName)) {
        showAlert('Validation Error', 'Category Name must be 3-50 characters long and include valid characters.', 'warning');
        return;
      }
      if (!categoryDescription) {
        showAlert('Validation Error', 'Category Description is required.', 'warning');
        return;
      }
      if (categoryDescription.length < 10 || categoryDescription.length > 500) {
        showAlert('Validation Error', 'Category Description must be between 10 and 150 characters long.', 'warning');
        return;
      }
      if (!croppedImageBlob) {
        showAlert('Validation Error', 'Please upload and crop an image before submitting.', 'warning');
        return;
      }

      // Prepare form data
      const formData = new FormData();
      formData.append('categoryName', categoryName);
      formData.append('categoryDescription', categoryDescription);
      formData.append('categoryImage', new File([croppedImageBlob], 'croppedImage.png', { type: 'image/png' }));

      // Send data to the server
      fetch('/admin/categoryManagement/add', {
        method: 'POST',
        body: formData,
      })
        .then((response) => {
          if (!response.ok) {
            return response.json().then((err) => {
              throw new Error(err.msg || 'Failed to upload category.');
            });
          }
          return response.json();
        })
        .then((data) => {
          showAlert('Success', 'Category added successfully!', 'success');
          console.log('Server response:', data);
          setTimeout(() => {
            window.location.reload();
          }, 3000)
        })
        .catch((error) => {
          console.error('Error:', error.message);
          alert(error.message);
        });
    });

  </script>
</body>

</html>