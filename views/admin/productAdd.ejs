<!DOCTYPE html>
<html lang="en">

<head>
<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<title>Product Entry</title>
<!-- Layout styles -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/admin/admin.css">
<link href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
	.image-upload-container {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 20px;
		margin-bottom: 20px;
	}

	.upload-section {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 15px;
		border: 1px solid #ddd;
		border-radius: 8px;
	}

	.preview-container {
		width: 100%;
		margin: 15px 0;
	}

	.round-preview {
		max-width: 300px;
		max-height: 400px;
		border: 4px solid #121212;
		object-fit: cover;
		margin: 0 auto;
	}

	.cropPreviewSection {
		width: 100%;
		max-width: 400px;
		margin: 15px auto;
		padding: 10px;
		background: #f8f9fa;
		border-radius: 8px;
	}

	.cropPreviewSection img {
		max-width: 100%;
		margin-bottom: 10px;
	}

	.crop-button {
		display: block;
		width: 100%;
		padding: 8px;
		background: #007bff;
		color: white;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		margin-top: 10px;
	}

	.crop-button:hover {
		background: #0056b3;
	}

	@media (max-width: 768px) {
		.image-upload-container {
			grid-template-columns: 1fr;
		}
	}


	.variant-section {
		margin-top: 20px;
	}

	.variant-inputs {
		margin-bottom: 15px;
	}

	.modal-body {
		max-height: 400px;
		overflow-y: auto;
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.form-group {
			margin-bottom: 15px;
		}

		.container-fluid {
			padding-left: 0;
			padding-right: 0;
		}
	}
</style>

</head>

<body>
	<div class="sidebar">
        <div class="sidebar-brand">
            <span class="brand-full">H E L D E N</span>
            <span class="brand-short">H</span>
        </div>
        <ul class="nav flex-column mt-3">
            <li class="nav-item">
                <a class="nav-link" href="/admin/dashboard">
                    <i class="fas fa-th-large"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/userManagement">
                    <i class="fas fa-users"></i>
                    <span>User Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/admin/productManagement">
                    <i class="fas fa-box"></i>
                    <span>Product Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/orderManagement">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Order Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/categoryManagement">
                    <i class="fas fa-folder"></i>
                    <span>Category Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/couponManagement">
                    <i class="fas fa-ticket-alt"></i>
                    <span>Coupon Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link " href="/admin/referralManagement">
                    <i class="fas fa-gift"></i>
                    <span>Referal Management</span>
                </a>
            </li>
            <li class="nav-item bottom">
                <a class="nav-link text-warning" href="/admin/logout">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </a>
            </li>
        </ul>
    </div>
	<div class="main-content">
		<!-- Sidebar Section -->

		<!-- partial -->
		<div class="container-fluid page-body-wrapper">
			<!-- partial:partials/_navbar.html -->
			<nav class="navbar p-0 fixed-top d-flex flex-row">
			</nav>

			<!-- Product Form Section -->
			<div class="row p-3 w-100 h-100">
				<div class="col-12 grid-margin">
					<div class="card">
						<div class="card-body">
							<h2 class="card-title">Add New Product</h2>
							<form id="productForm" action="/admin/productManagement/add" method="post" enctype="multipart/form-data">
								<div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label for="productName" class="form-label">Product Name</label>
											<input type="text" class="form-control" id="productName" name="productName">
											<p id="productNameError" class="text-danger" style="display:none;">Please enter a valid product name.</p>
										</div>
									</div>
								</div>

								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											<label for="productPrice" class="form-label">Price</label>
											<input type="number" class="form-control" id="productPrice" name="productPrice">
											<p id="productPriceError" class="text-danger" style="display:none;">Please enter a valid price.</p>
										</div>
									</div>
									<div class="col-md-6">
										<div class="form-group">
											<label for="offerPrice" class="form-label">Offer Price</label>
											<input type="number" class="form-control" id="offerPrice" name="productOfferPrice">
											<p id="offerPriceError" class="text-danger" style="display:none;">Please enter a valid price.</p>
										</div>
									</div>
								</div>

								<!-- Image Upload Section -->
								<div class="form-group">
									<label for="productImages">Images</label>
									<div class="image-upload-container">
										<% for(let i = 0; i < 4; i++) { %>
										<div class="upload-section">
											<input type="file" class="form-control product-image productImagesAdd" id="image<%= i %>" accept="image/*" onchange="previewAndCrop(event, <%= i %>)" name="productImage<%= i + 1 %>" />

											<div class="preview-container">
												<img id="roundPreview<%= i %>" alt="Preview" style="display: none;" class="round-preview" />
											</div>

											<div class="cropPreviewSection" id="cropPreviewSection<%= i %>" style="display: none">
												<div style="max-width: 380px;">
													<img id="cropPreview<%= i %>"  />
												</div>
												<button type="button" class="crop-button" onclick="startCropping(<%= i %>)">
													Crop Image <%= i + 1 %>
												</button>
											</div>
										</div>
										<% } %>
									</div>
									<p  id="imageError"></p>
								</div>

								<div class="form-group">
									<label for="productDescription" class="form-label">Description</label>
									<textarea class="form-control" id="productDescription" name="productDescription" rows="3"></textarea>
									<p id="productDescriptionError" class="text-danger" style="display:none;">Please enter a product description.</p>
								</div>

								<!-- productTags -->
								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											<label for="productTags" class="form-label">Tags</label>
											<input type="text" class="form-control" id="productTags" name="productTags" placeholder="Comma separated">
										</div>
									</div>

									<!-- productBrand -->
									<div class="col-md-6">
										<div class="form-group">
											<label for="productBrand" class="form-label">Brand</label>
											<input type="text" class="form-control" id="productBrand" name="productBrand">
										</div>
									</div>
								</div>

								<!-- productWarranty -->
								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											<label for="productWarranty" class="form-label">Warranty</label>
											<input type="text" class="form-control" id="productWarranty" name="productWarranty" placeholder="e.g., 1 year">
										</div>
									</div>
									<div class="col-md-6">
										<div class="form-group">
											<label for="productReturnPolicy" class="form-label">Return Policy</label>
											<input type="text" class="form-control" id="productReturnPolicy" name="productReturnPolicy" placeholder="e.g., 30 days">
										</div>
									</div>
								</div>

								<!-- productCategory -->
								<div class="form-group">
									<label for="productCategory" class="form-label">Category</label>
									<select class="form-control" id="productCategory" name="productCategory">
										<% categories.forEach(category => { %>
										<option value="<%= category._id %>"><%= category.name %></option>
										<% }) %>
									</select>
									<p id="productCategoryError" class="text-danger" style="display:none;">Please select a product category.</p>
								</div>

								<!-- TYPE -->
								<div class="form-group">
									<label for="productType" class="form-label">Select Type</label>
									<select class="form-control" id="productType" name="productType">
										<option value="TopWare">TopWare</option>
										<option value="BottomWare">BottomWare</option>
									</select>
								</div>

								<!-- Stock Management -->
								<div class="row mt-3">
									<div class="col-12">
										<div class="form-group">
											<label class="form-label">Stock Management</label>
											<div id="stockManagementContainer" class="row g-3">
												<!-- Stock inputs will be dynamically added here -->
											</div>
											<input type="hidden" name="productStockManagement" id="productStockManagement" value="[]">
										</div>
									</div>
								</div>

								<div class="text-center">
									<button type="submit" class="btn btn-primary btn-submit mt-3 w-50">
										Add Product
									</button>
								</div>
							</form>
						</div>
					</div>
				</div>
			</div>
			<!-- Modal for Stock Management -->
			<div class="modal fade" id="stockModal" tabindex="-1" role="dialog" aria-labelledby="stockModalLabel" aria-hidden="true">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="stockModalLabel">Manage Stock for Variants</h5>
							<button type="button" class="close" data-dismiss="modal" aria-label="Close">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							<div id="variantSection">
								<!-- Dynamic Variant Inputs will go here -->
								<div class="variant-inputs">
									<label for="variantSize">Size</label>
									<input type="text" class="form-control" name="variantSize[]" required>
									<label for="variantColor">Color</label>
									<input type="text" class="form-control" name="variantColor[]" required>
									<label for="variantStock">Stock</label>
									<input type="number" class="form-control" name="variantStock[]" required>
								</div>
							</div>
							<button type="button" class="btn btn-secondary" onclick="addVariant()">Add Another Variant</button>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
							<button type="button" class="btn btn-primary" data-dismiss="modal">Save Changes</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>

	<script>
		function addVariant() {
			const variantTemplate = document.querySelector('.variant-inputs');
			const variantClone = variantTemplate.cloneNode(true);
			document.getElementById('variantSection').appendChild(variantClone);
		}
	</script>
	<script>
		document.querySelectorAll('input[type="file"]').forEach((input, index) => {
			input.addEventListener('change', (event) => {
				const file = event.target.files[0];
				if(file) {
					const reader = new FileReader();
					reader.onload = () => {
						document.getElementById(`roundPreview${index}`).src = reader.result;
					};
					reader.readAsDataURL(file);
				}
			});
		});
	</script>

	<script>
		const cropperInstances = [];
		const croppedImages = [];

		function previewAndCrop(event, index) {
			const file = event.target.files[0];
			if(!file) return;

			// Validate MIME type
			const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"];
			if(!allowedTypes.includes(file.type)) {
				Swal.fire({
					icon: 'warning', // Yellow warning icon
					title: 'Invalid File!',
					text: 'Please select a valid image file (JPEG, PNG, GIF, or WebP).',
					confirmButtonColor: '#f8b400', // Yellow button for warning
					confirmButtonText: 'OK'
				});
				event.target.value = ""; // Clear the invalid file input
				return;
			}

			const cropPreview = document.getElementById(`cropPreview${index}`);
			const cropPreviewSection = document.getElementById(`cropPreviewSection${index}`);
			const roundPreview = document.getElementById(`roundPreview${index}`);

			// Set the cropping preview
			cropPreview.src = URL.createObjectURL(file);
			cropPreviewSection.style.display = "block";
			roundPreview.style.display = "none"; // Hide the main preview temporarily

			// Initialize or reinitialize the cropper
			if(cropperInstances[index]) {
				cropperInstances[index].destroy();
			}
			cropperInstances[index] = new Cropper(cropPreview, {
				aspectRatio: 3 / 4,
				viewMode: 1,
				autoCropArea: 1,
				scalable: true,
				zoomable: true,
				movable: true,
			});
		}

		function startCropping(index) {
			const cropper = cropperInstances[index];
			if(!cropper) return;

			// Crop the image and convert it to a Blob
			cropper.getCroppedCanvas().toBlob((blob) => {
				croppedImages[index] = blob; // Store the cropped blob in the array

				const cropPreviewSection = document.getElementById(`cropPreviewSection${index}`);
				const roundPreview = document.getElementById(`roundPreview${index}`);

				// Update the round preview with the cropped image
				roundPreview.src = URL.createObjectURL(blob);
				roundPreview.style.display = "block";
				cropPreviewSection.style.display = "none";

				// Update the corresponding file input with the cropped image Blob
				const fileInput = document.getElementById(`image${index}`);
				const dataTransfer = new DataTransfer();
				const croppedFile = new File([blob], fileInput.files[0].name, {
					type: 'image/png'
				});
				dataTransfer.items.add(croppedFile);
				fileInput.files = dataTransfer.files;
			});
		}
	</script>

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			document.getElementById('productForm').addEventListener('submit', function(event) {
				event.preventDefault(); // Prevent the form from submitting

				const formData = new FormData(this); // Get all form data
				const formObject = {}; // Initialize an empty object to store form data

				formData.forEach((value, key) => {
					formObject[key] = value; // Map form data to an object
				});
			});
		})
	</script>
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const categorySelect = document.getElementById('productType');
			const stockContainer = document.getElementById('stockManagementContainer');
			const stockManagementInput = document.getElementById('productStockManagement');

			// Size configurations
			const sizeConfigs = {
				'bottomware': Array.from({
					length: 9
				}, (_, i) => (28 + (i * 2)).toString()),
				'topware': ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']
			};

			// Function to create stock input fields
			function createStockFields() {
				const productType = categorySelect.value.toLowerCase();

				const sizes = sizeConfigs[productType] || [];


				stockContainer.innerHTML = '';
				sizes.forEach(size => {
					const col = document.createElement('div');
					col.className = 'col-md-3 mb-3';
					col.innerHTML = `
         <div class="input-group">
           <span class="input-group-text">${size}</span>
           <input 
             type="number" 
             class="form-control stock-input" 
             data-size="${size}" 
             value="0"
             min="0"
             placeholder="Quantity"
           >
         </div>
       `;
					stockContainer.appendChild(col);
				});

				document.querySelectorAll('.stock-input').forEach(input => {
					input.addEventListener('change', updateStockManagement);
				});

				updateStockManagement();
			}

			// Function to update hidden stock management input
			function updateStockManagement() {
				const stockData = [];
				document.querySelectorAll('.stock-input').forEach(input => {
					const quantity = parseInt(input.value) || 0;
					if(quantity >= 0) {
						stockData.push({
							size: input.dataset.size,
							quantity: quantity
						});
					}
				});
				stockManagementInput.value = JSON.stringify(stockData); // Ensure this is correctly serialized
			}


			// Listen for category changes
			categorySelect.addEventListener('change', function() {
				createStockFields(this);
			});

			// Initialize stock fields with current category
			createStockFields(categorySelect);
		});



		document.getElementById("productForm").addEventListener("submit", function(event) {
			event.preventDefault();

			const errorMessages = document.querySelectorAll(".error-message");
			errorMessages.forEach((msg) => msg.remove());

			const productName = document.getElementById("productName").value.trim();
			const productPrice = parseFloat(document.getElementById("productPrice").value);
			const offerPrice = parseFloat(document.getElementById("offerPrice").value) || null;
			const productDescription = document.getElementById("productDescription").value.trim();
			const productTags = document.getElementById("productTags").value.trim();
			const productBrand = document.getElementById("productBrand").value.trim();
			const productWarranty = document.getElementById("productWarranty").value.trim();
			const productReturnPolicy = document.getElementById("productReturnPolicy").value.trim();
			const productCategory = document.getElementById("productCategory").value;
			const productStockManagement = document.getElementById("productStockManagement").value;
			const productType = document.getElementById("productType").value;
			const productImages = [...document.querySelectorAll(".productImagesAdd")];

			let hasError = false;

			function showError(inputId, message) {
				const inputElement = document.getElementById(inputId);
				if(inputElement) {
					const error = document.createElement("p");
					error.classList.add("text-danger", "error-message");
					error.textContent = message;
					inputElement.parentElement.appendChild(error);
				} else {
					console.error(`Input element with ID "${inputId}" not found.`);
				}
				hasError = true;
			}

			// Validation logic
			if(!productName) {
				showError("productName", "Product name is required.");
			}

			if(isNaN(productPrice) || productPrice <= 0) {
				showError("productPrice", "Product price must be greater than zero.");
			}

			if(offerPrice !== null && (isNaN(offerPrice) || offerPrice < 1 || offerPrice >= productPrice)) {

				showError("offerPrice", "Offer price must be greater than zero and less than the original price.");
			}

			if(!productDescription) {
				showError("productDescription", "Product description is required.");
			}

			if(!productCategory) {
				showError("productCategory", "Please select a product category.");
			}

			if(!productType) {
				showError("productType", "Please select a product type.");
			}

			if(productTags && productTags.split(",").length > 10) {
				showError("productTags", "You can add up to 10 tags only.");
			}

			if(productBrand && productBrand.length > 50) {
				showError("productBrand", "Brand name cannot exceed 50 characters.");
			}

			if(productWarranty && !/^\d+\s*(year|month)s?$/.test(productWarranty)) {
				showError("productWarranty", "Warranty must be in the format (e.g., 1 year, 6 months).");
			}

			if(productReturnPolicy && !/^\d+\s*(day|month)s?$/.test(productReturnPolicy)) {
				showError("productReturnPolicy", "Return policy must be in the format (e.g., 30 days, 1 month).");
			}

			if(productStockManagement) {
				try {
					const stockData = JSON.parse(productStockManagement);
					if(!Array.isArray(stockData)) {
						throw new Error();
					}
					const totalStock = stockData.reduce((sum, item) => sum + (item.quantity || 0), 0);
					if(totalStock <= 0) {
						showError("productStockManagement", "Total stock must be greater than zero.");
					}
					stockData.forEach((item) => {
						if(!item.size || item.quantity < 0) {
							throw new Error();
						}
					});
				} catch {
					showError("productStockManagement", "Invalid stock management data. Please check your inputs.");
				}
			}

			let imageUploaded = false;
			productImages.forEach((input, index) => {
				if(input.files.length > 2) {
					imageUploaded = true;
					const file = input.files[0];
					if(!file.type.startsWith("image/")) {
						showError(`image${index}`, `Image ${index + 1} must be a valid image file.`);
					}
				}
			});

			if(!imageUploaded) {
				showError("imageError", "Please upload at 3 one product image.");
			}

			if(hasError) {
				Swal.fire({
					icon: "error",
					title: "Validation Error",
					text: "Please fix the highlighted errors before submitting.",
				});
				return;
			}

			Swal.fire({
				title: "Add Product",
				text: "Are you sure you want to add this product?",
				icon: "question",
				showCancelButton: true,
				confirmButtonText: "Yes, add it!",
				cancelButtonText: "Cancel",
			}).then((result) => {
				if(result.isConfirmed) {
					this.submit();
				}
			});
		});
	</script>


	<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>