<!DOCTYPE html>
<html lang="en">

<head>
    <title>Forgot Password</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!--===============================================================================================-->
    <link rel="icon" type="image/png" href="/users/images/icons/favicon.png" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/vendor/bootstrap/css/bootstrap.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/fonts/font-awesome-4.7.0/css/font-awesome.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/fonts/iconic/css/material-design-iconic-font.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/fonts/linearicons-v1.0.0/icon-font.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/vendor/animate/animate.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/vendor/css-hamburgers/hamburgers.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/vendor/animsition/css/animsition.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/vendor/select2/select2.min.css" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/users/vendor/perfect-scrollbar/perfect-scrollbar.css" />
    <!--===============================================================================================-->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <!-- Font Awsome CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
    <!-- SweetAlert CDN -->
    <link rel="stylesheet" type="text/css" href="/users/css/util.css" />
    <link rel="stylesheet" href="/users/css/reg-log.css">
    <link rel="stylesheet" type="text/css" href="/users/css/main.css" />

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!--===============================================================================================-->
    <style>
        .first {
            display: block;
        }

        .second {
            display: none;
        }

        .third {
            display: none;
        }

        .up-form {
            padding: 60px 30px;
            width: 100%;
            max-width: 500px;
            margin: auto;
        }

        .up-form h1 {
            text-align: center;
            font-size: 1.8rem;
            color: #333;
            margin-bottom: 20px;
        }

        .form {
            gap: 15px;
        }

        .form h1 {
            font-size: 2rem;
            color: black;
            margin-bottom: 30px;
        }

        .form__input {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            border: 2px solid #302f2f;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .form__input:focus {
            outline: none;
            border-color: #d4bb68;
            box-shadow: 0 0 5px rgba(194, 120, 16, 0.5);
        }

        .err {
            color: #d9534f;
            font-size: 0.85rem;
            display: none;
            margin: -10px 0 5px 0;
        }

        /* Buttons */
        .form__btn button {
            display: flex;
            margin-top: 10px;
            align-items: center;
            justify-content: center;
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            border: none;
            background-color: #b6a05a;
            color: #fff;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .form__btn button:hover {
            background-color: #a27a0a;
        }

        .loader-bar {
            display: none;
            height: 4px;
            width: 50px;
            background-color: white;
            margin-left: 10px;
            animation: loading 1s linear infinite;
        }

        @keyframes loading {
            0% {
                width: 10px;
                opacity: 0.2;
            }

            50% {
                width: 30px;
                opacity: 1;
            }

            100% {
                width: 50px;
                opacity: 0.2;
            }
        }

        .form__input-container {
            position: relative;
        }

        /* Icons */
        .eye-icon {
            position: absolute;
            right: 5%;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #bbb;
            transition: color 0.3s ease;
        }

        .eye-icon:hover {
            color: #3d3d3d;
        }

        /* Resend OTP */
        .reotpbuttonForgot {
            color: #007bff;
            font-weight: 500;
            cursor: pointer;
            text-decoration: underline;
            transition: color 0.3s ease;
        }

        .reotpbuttonForgot:hover {
            color: #0056b3;
            text-decoration: none;
        }

        .reotpbuttonForgot[disabled] {
            color: #ccc;
            cursor: not-allowed;
        }


        /* Responsive Styles */
        @media (max-width: 768px) {
            .up-container {
                flex-direction: column;
            }

            .background-image2 {
                display: none;
            }

            .up-form {
                width: 90%;
                padding: 20px;
            }
        }
    </style>
</head>

<body class="animsition">
    <!-- Header -->
    <%- include('./layout/header') %>

        <!-- Signup Container -->
        <div class="container up-container">
            <div class="row g-0 col-lg-12">
                <div class="col-lg-6 d-flex align-items-center">
                    <div class="up-form">

                        <form class="form grid first">
                            <h1>Change Password . _ . ?</h1>
                            <input type="email" placeholder="Your Email" id="passwordInput4"
                                class="form__input emailForgot" name="email" />
                            <p class="err erremailForgot">err msg</p>

                            <div class="form__btn">
                                <button type="submit" class="btn btnForgot">
                                    <p class="getotptextForgot">Forget Password</p>
                                    <div class="getotploaderForgot loader-bar"></div>
                                </button>
                            </div>
                        </form>


                        <form class="form grid second" id="second">
                            <!-- <input type="email" placeholder="Your Email" class="form__input emailForgot" name="email" /> -->
                            <!-- <p class="err erremailForgot">Enter the email used for OTP</p> -->
                            <h1>Did You Get OTP . _ . ?</h1>

                            <input type="text" placeholder="OTP" class="form__input otpForgot" name="otp" />
                            <p class="err errotpForgot">Enter OTP</p>
                            <div class="reotpalertForgot">
                                Didnâ€™t receive the OTP?
                                <span id="resend-link" class="reotpbuttonForgot">Resend OTP</span>
                            </div>

                            <div class="form__btn">
                                <button type="submit" class="btn btnverifyForgot">
                                    <p class="getverifytextForgot">Verify OTP</p>
                                    <div class="getverifyloaderForgot loader-bar"></div>
                                </button>
                            </div>
                        </form>


                        <form class="form grid third">
                            <!-- <input type="email" placeholder="Your Email" class="form__input emailForgot" name="email"/>
                            <p class="err erremailForgot">Re-enter email to confirm</p> -->
                            <h1>_ Change Your PassKey _</h1>

                            <div class="form__input-container ">
                                <input type="password" placeholder="Your New Password" id="passwordInput5"
                                    class="form__input newpassForgot" name="pass" />
                                <i class="fas fa-eye eye-icon toggleEye" onclick="toggleEye('passwordInput5', this)"
                                    id="togglePassword"></i>
                            </div>
                            <p class="err errpassForgot">err msg</p>

                            <div class="form__input-container">
                                <input type="password" placeholder="Confirm Password" id="passwordInput6"
                                    class="form__input newcpassForgot" name="cpass" />
                                <i class="fas fa-eye eye-icon toggleEye" onclick="toggleEye('passwordInput6', this)"
                                    id="togglePassword"></i>
                            </div>
                            <p class="err errcpassForgot">err msg</p>

                            <div class="form__btn">
                                <button type="submit" class="btn btnChangePassForgot">
                                    <p class="ChangePassTextForgot">Change Password</p>
                                    <div class="ChangePassloaderForgot loader-bar"></div>
                                </button>
                            </div>
                        </form>

                    </div>
                </div>
                <div class="col-lg-6 background-image2 d-none d-lg-block"></div>
            </div>
        </div>




        <!-- Footer -->
        <%- include('./layout/footer') %>

            </div>

            <script>
                function toggleEye(inputId, iconElement) {
                    // Get the password input field and icon
                    const passwordInput = document.getElementById(inputId);
                    const icon = iconElement;

                    // Toggle password visibility
                    if (passwordInput.type === "password") {
                        passwordInput.type = "text"; // Show password
                        icon.classList.remove("fa-eye");  // Change to eye open icon
                        icon.classList.add("fa-eye-slash");  // Change to eye slash icon
                    } else {
                        passwordInput.type = "password"; // Hide password
                        icon.classList.remove("fa-eye-slash");  // Change to eye open icon
                        icon.classList.add("fa-eye");  // Change to eye icon
                    }
                }
                document.addEventListener("DOMContentLoaded", () => {
                    const forms = {
                        first: document.querySelector(".form.first"),
                        second: document.querySelector(".form.second"),
                        third: document.querySelector(".form.third"),
                    };

                    let emailValue = "";

                    // Helper functions
                    const showError = (input, message) => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: message,
                        });
                        input.classList.add("error");
                    };


                    const showSuccess = (input) => {
                        const errorElement = input.nextElementSibling;
                        input.classList.remove("error");
                        input.classList.add("success");
                        errorElement.style.display = "none";
                    };

                    const validateEmail = (email) => {
                        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                        return regex.test(email);
                    };

                    const validateOTP = (otp) => {
                        const regex = /^[0-9]{6}$/;
                        return regex.test(otp);
                    };

                    const validatePassword = (password) => {
                        // At least 8 characters, one uppercase letter, one lowercase letter, one number, and one special character
                        const regex = /^(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
                        return regex.test(password);
                    };

                    // First Form: Request OTP
                    document.querySelector(".btnForgot").addEventListener("click", async (event) => {
                        event.preventDefault();
                        const emailInput = document.querySelector("#passwordInput4");
                        const email = emailInput.value.trim();
                        if (!email) {
                            showError(emailInput, "Email is required!");
                            return;
                        }
                        if (!validateEmail(email)) {
                            showError(emailInput, "Please enter a valid email!");
                            return;
                        }
                        emailInput.classList.remove("error"); // Remove error styling
                        emailValue = email;

                        // Show "Please Wait" Swal before sending OTP
                        Swal.fire({
                            title: 'Please Wait...',
                            text: 'Sending OTP...',
                            didOpen: () => {
                                Swal.showLoading(); // Show the loading spinner
                            },
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        });
                        try {
                            const response = await fetch("/forgot-password/request", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ email }),
                            });
                            const result = await response.json();
                            if (response.ok) {
                                Swal.close(); // Close the "Please Wait" modal
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'OTP sent to your email!',
                                });
                                forms.first.style.display = "none";
                                forms.second.style.display = "block";
                            } else {
                                Swal.close(); // Close the "Please Wait" modal
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: result.message || "Failed to send OTP. Try again!",
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred. Please try again later!',
                            });
                            console.error(error);
                        }
                    });


                    // Second Form: Verify OTP
                    document.querySelector(".btnverifyForgot").addEventListener("click", async (event) => {
                        event.preventDefault();
                        const otpInput = document.querySelector(".otpForgot");
                        const otp = otpInput.value.trim();
                        if (!otp) {
                            showError(otpInput, "OTP is required!");
                            return;
                        }
                        if (!validateOTP(otp)) {
                            showError(otpInput, "Invalid OTP! It must be 6 digits.");
                            return;
                        }
                        otpInput.classList.remove("error"); // Remove error styling
                        try {
                            const response = await fetch("/forgot-password/verify", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ email: emailValue, otp }),
                            });
                            const result = await response.json();
                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'OTP verified successfully!',
                                });
                                forms.second.style.display = "none";
                                forms.third.style.display = "block";
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: result.message || "OTP verification failed. Try again!",
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred. Please try again later!',
                            });
                            console.error(error);
                        }
                    });


                    // Third Form: Change Password
                    document.querySelector(".btnChangePassForgot").addEventListener("click", async (event) => {
                        event.preventDefault();
                        const newPasswordInput = document.querySelector(".newpassForgot");
                        const confirmPasswordInput = document.querySelector(".newcpassForgot");
                        const newPassword = newPasswordInput.value.trim();
                        const confirmPassword = confirmPasswordInput.value.trim();

                        if (!newPassword || !confirmPassword) {
                            showError(newPasswordInput, "Password is required!");
                            showError(confirmPasswordInput, "Confirm password is required!");
                            return;
                        }
                        if (!validatePassword(newPassword)) {
                            showError(
                                newPasswordInput,
                                "Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a number, and a special character!"
                            );
                            return;
                        }
                        if (newPassword !== confirmPassword) {
                            showError(confirmPasswordInput, "Passwords do not match!");
                            return;
                        }
                        newPasswordInput.classList.remove("error");
                        confirmPasswordInput.classList.remove("error");

                        try {
                            const response = await fetch("/forgot-password/change-password", {
                                method: "PUT",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ email: emailValue, newPassword }),
                            });
                            const result = await response.json();
                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Password changed successfully! Redirecting to login page...',
                                });
                                window.location.href = "/login";
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: result.message || "Password change failed. Try again!",
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred. Please try again later!',
                            });
                            console.error(error);
                        }
                    });




                    // resend OTP 
                    ////////////////////////////////

                    // Resend OTP Functionality
                    let resendTimeout = 20; // Cooldown period in seconds
                    const resendLink = document.getElementById('resend-link');
                    const second = document.getElementById('second');

                    // Initial Timer Setup
                    function startResendTimer() {
                        let timer = setInterval(() => {
                            if (resendTimeout > 0) {
                                resendLink.textContent = `Resend OTP in ${resendTimeout--}s`;
                                resendLink.style.pointerEvents = "none"; // Disable clicking
                            } else {
                                clearInterval(timer);
                                resendLink.textContent = "Resend OTP";
                                resendLink.style.pointerEvents = "auto"; // Enable clicking
                                resendLink.onclick = async () => {
                                    // Disable button and start resending process
                                    resendLink.disabled = true;
                                    resendLink.textContent = "Resending...";

                                    try {
                                        const response = await fetch('/forgot-password/resendOtp', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ email: emailValue }) // Replace dynamically
                                        });

                                        const result = await response.json();
                                        if (result.success) {
                                            resendLink.textContent = "OTP Resent!";
                                            // Restart the cooldown timer
                                            resendTimeout = 15;
                                            timer = setInterval(() => {
                                                if (resendTimeout > 0) {
                                                    resendLink.textContent = `Resend OTP in ${resendTimeout--}s`;
                                                    resendLink.style.pointerEvents = "none";
                                                } else {
                                                    clearInterval(timer);
                                                    resendLink.textContent = "Resend OTP";
                                                    resendLink.disabled = false;
                                                    resendLink.style.pointerEvents = "auto";
                                                }
                                            }, 1000);
                                        } else {
                                            resendLink.textContent = result.message || "Resend failed";
                                            resendLink.style.pointerEvents = "auto";
                                        }
                                    } catch (error) {
                                        console.error("Error resending OTP:", error);
                                        resendLink.textContent = "Error. Please try again.";
                                        resendLink.style.pointerEvents = "auto";
                                    }
                                };
                            }
                        }, 1000);
                    };

                    const observer = new MutationObserver(() => {
                        if (getComputedStyle(second).display === 'block') {
                            startResendTimer();
                            observer.disconnect(); // Stop observing once the timer starts
                        }
                    });

                    // Start observing the visibility of the form
                    observer.observe(second, { attributes: true, attributeFilter: ['style'] });

                });




            </script>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>

            <!--===============================================================================================-->
            <script src="/users/vendor/jquery/jquery-3.2.1.min.js"></script>
            <!--===============================================================================================-->
            <script src="/users/vendor/animsition/js/animsition.min.js"></script>
            <!--===============================================================================================-->
            <script src="/users/vendor/bootstrap/js/popper.js"></script>
            <script src="/users/vendor/bootstrap/js/bootstrap.min.js"></script>
            <!--===============================================================================================-->
            <script src="/users/vendor/select2/select2.min.js"></script>
            <script>
                $(".js-select2").each(function () {
                    $(this).select2({
                        minimumResultsForSearch: 20,
                        dropdownParent: $(this).next(".dropDownSelect2"),
                    });
                });
            </script>
            <!--===============================================================================================-->
            <script src="/users/vendor/MagnificPopup/jquery.magnific-popup.min.js"></script>
            <!--===============================================================================================-->
            <script src="/users/vendor/perfect-scrollbar/perfect-scrollbar.min.js"></script>
            <script>
                $(".js-pscroll").each(function () {
                    $(this).css("position", "relative");
                    $(this).css("overflow", "hidden");
                    var ps = new PerfectScrollbar(this, {
                        wheelSpeed: 1,
                        scrollingThreshold: 1000,
                        wheelPropagation: false,
                    });

                    $(window).on("resize", function () {
                        ps.update();
                    });
                });
            </script>
            <!--===============================================================================================-->
            <script src="/users/js/main.js"></script>
</body>

</html>