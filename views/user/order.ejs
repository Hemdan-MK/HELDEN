<!DOCTYPE html>
<html lang="en">

<head>
<title>Dashboard</title>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<!--===============================================================================================-->
<link rel="icon" type="image/png" href="/users/images/icons/favicon.png" />
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="/users/vendor/bootstrap/css/bootstrap.min.css" />
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="/users/fonts/font-awesome-4.7.0/css/font-awesome.min.css" />
<!--===============================================================================================-->
<!-- <link rel="stylesheet" type="text/css" href="/users/fonts/iconic/css/material-design-iconic-font.min.css" /> -->
<!--===============================================================================================-->
<!-- <link rel="stylesheet" type="text/css" href="/users/fonts/linearicons-v1.0.0/icon-font.min.css" /> -->
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="/users/vendor/animate/animate.css" />
<!--===============================================================================================-->
<!-- <link rel="stylesheet" type="text/css" href="/users/vendor/css-hamburgers/hamburgers.min.css" /> -->
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="/users/vendor/animsition/css/animsition.min.css" />
<!--===============================================================================================-->
<!-- <link rel="stylesheet" type="text/css" href="/users/vendor/select2/select2.min.css" /> -->
<!--===============================================================================================-->
<!-- <link rel="stylesheet" type="text/css" href="/users/vendor/perfect-scrollbar/perfect-scrollbar.css" /> -->
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="/users/css/util.css" />
<link rel="stylesheet" type="text/css" href="/users/css/main.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<!--===============================================================================================-->
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Bootstrap JS Bundle (Popper.js included) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<style>
	/* Modal styles */
	.modal {
		/* Hidden by default */
		position: fixed;
		z-index: 100000000000 !important;
		/* Stay on top */
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		overflow: auto;
		background-color: rgba(0, 0, 0, 0.4);
		/* Black with opacity */
		padding-top: 60px;
	}

	.modal-content {
		background-color: white;
		margin: auto;
		padding: 20px;
		border: 1px solid #888;
		width: 80%;
		max-width: 600px;
		border-radius: 8px;
	}


	.order-item {
		background-color: #f9f9f9;
		border-radius: 8px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	}

	/* Button styling */
	.btn-info {
		background-color: #4CAF50;
		border: none;
		color: white;
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 5px;
	}

	.btn-info:hover {
		background-color: #45a049;
	}

	.btn-danger {
		background-color: #e74c3c;
		border: none;
		color: white;
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 5px;
	}

	.btn-danger:hover {
		background-color: #c0392b;
	}

	/* Modal Close Button */
	.close-btn {
		color: #aaa;
		font-size: 28px;
		font-weight: bold;
		position: absolute;
		top: 10px;
		right: 25px;
	}

	.close-btn:hover,
	.close-btn:focus {
		color: black;
		text-decoration: none;
		cursor: pointer;
	}

	/* Responsive styling for smaller screens */
	@media (max-width: 768px) {
		.conte {
			width: 100%;
		}

		.order-item {
			margin-bottom: 1.5rem;
		}

		.modal-content {
			width: 90%;
		}
	}

	a {
		text-decoration: none;
	}

	.conte {
		border: 1px solid #ccc;
		border-radius: 8px;
		overflow: hidden;
	}

	.overflow-auto {
		max-height: calc(100% - 150px);
		/* Adjust the height dynamically */
		scrollbar-width: thin;
		/* Firefox */
	}

	.overflow-auto::-webkit-scrollbar {
		width: 6px;
	}

	.overflow-auto::-webkit-scrollbar-thumb {
		background-color: #888;
		border-radius: 10px;
	}




	.error-message {
		color: red;
		font-size: 0.9em;
		margin-top: 5px;
		display: none;
	}

	.custom-swal-popup {
		background-color: #f8f9fa;
		/* Example background color */
		border-radius: 8px;
		padding: 20px;
	}

	.custom-swal-title {
		font-size: 18px;
		color: #333;
	}

	.custom-swal-content {
		font-size: 16px;
	}

	.orders::-webkit-scrollbar {
		width: 8px;
	}

	.orders::-webkit-scrollbar-thumb {
		background-color: #888;
		border-radius: 10px;
	}

	.orders::-webkit-scrollbar-thumb:hover {
		background-color: #555;
	}

	.pagination-container {
		margin-top: 2rem;
		margin-bottom: 2rem;
	}

	.pagination .page-link {
		color: #397f79;
		border-color: #dee2e6;
	}

	.pagination .page-item.active .page-link {
		background-color: #397f79;
		border-color: #397f79;
		color: white;
	}

	.pagination .page-link:hover {
		color: #2c605c;
		background-color: #e9ecef;
		border-color: #dee2e6;
	}

	.pagination .page-item.disabled .page-link {
		color: #6c757d;
		pointer-events: none;
		background-color: #fff;
		border-color: #dee2e6;
	}
</style>
</head>

<body class="animsition">
	<!-- Header -->
	<%- include('./layout/header') %>
	<!-- Dashboard -->
	<div class="h-75 d-flex justify-content-around w-100">
		<div class="inside p-all-50  h-full w-75 d-flex">
			<div class="items w-25 bg-white h-100 d-flex flex-column">
				<ul class="list-group w-100 h-100" id="sidebar-menu">
					<a href="/myAccount" class="list-item">
						<li data-session="/">Dashboard</li>
					</a>
					<a href="/myAccount/orders" class="list-item" style="background-color: #397f79; color: white;">
						<li data-session="orders">Order</li>
					</a>
					<a href="/myAccount/update-profile" class="list-item">
						<li data-session="update-profile">Update Profile</li>
					</a>
					<a href="/myAccount/saved-address" class="list-item">
						<li data-session="saved-address">Saved Address</li>
					</a>
					<a href="/myAccount/wallet" class="list-item">
						<li data-session="wallet">Wallet</li>
					</a>
					<a href="/myAccount/refer" class="list-item">
						<li data-session="wallet">Referals</li>
					</a>
					<a href="/logout" class="list-item">
						<li data-session="logout">Logout</li>
					</a>
				</ul>
			</div>

			<!-- Order Section -->
			<div class="conte w-75 h-100 position-relative d-flex flex-column p-4">
				<!-- Header Section -->
				<h2 class="text-center mt-3 mb-4">Your Orders</h2>

				<div class="orders" style="overflow-y: auto;">
					<% if (orders.length === 0) { %>
					<div class="alert alert-info" role="alert">
						No orders available
					</div>
					<% } else { %>
					<% orders.forEach(order => { %>
					<div class="order-item card mb-4 p-3 shadow-sm">
						<h4 class="text-primary">Order ID: <%= order.orderId %></h4>
						<p>Status: <%= order.status %></p>
						<p>Total Amount: Rs. <%= order.totalAmount %></p>
						<div class="d-flex w-100 justify-content-between">
							<button class="btn btn-info view-order-btn" data-id="<%= order._id %>">View Order</button>
							<% if (order.status === 'Pending' || order.status === 'Shipping') { %>
							<% if (order.paymentStatus !== 'Failed') { %>
							<button class="btn btn-outline-danger cancel-order-btn" data-id="<%= order._id %>">Cancel Order</button>
							<% } else if (order.paymentStatus === 'Failed') { %>
							<button class="btn btn-outline-danger retry-order-btn" data-id="<%= order._id %>">Retry Payment</button>
							<% } %>
							<% } %>
							<% if (order.status === 'Completed') { %>
							<button class="btn btn-success return-order-btn" data-id="<%= order._id %>">Return Order</button>
							<% } %>
							<a href="/download-invoice/<%= order._id %>" class="btn btn-behance">Get PDF Receipt</a>
						</div>
					</div>
					<% }); %>
					<% } %>
				</div>

				<!-- Add this right after the orders div -->
				<div class="pagination-container d-flex justify-content-center mt-4">
					<nav aria-label="Orders pagination">
						<ul class="pagination">
							<% if (hasPrevPage) { %>
							<li class="page-item">
								<a class="page-link" href="/myAccount/orders?page=<%= currentPage - 1 %>" aria-label="Previous">
									<span aria-hidden="true">&laquo;</span>
								</a>
							</li>
							<% } %>

							<% for(let i = 1; i <= totalPages; i++) { %>
							<li class="page-item <%= currentPage === i ? 'active' : '' %>">
								<a class="page-link" href="/myAccount/orders?page=<%= i %>"><%= i %></a>
							</li>
							<% } %>

							<% if (hasNextPage) { %>
							<li class="page-item">
								<a class="page-link" href="/myAccount/orders?page=<%= currentPage + 1 %>" aria-label="Next">
									<span aria-hidden="true">&raquo;</span>
								</a>
							</li>
							<% } %>
						</ul>
					</nav>
				</div>

				<!-- Order Invoice Modal -->
				<div class="modal fade" id="orderInvoiceModal" tabindex="-1" aria-labelledby="orderInvoiceLabel" aria-hidden="true">
					<div class="modal-dialog modal-lg">
						<div class="modal-content">
							<div class="modal-header">
								<h5 class="modal-title" id="orderInvoiceLabel">Order Invoice</h5>
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body" id="orderInvoiceContent">
								<!-- Order details will be dynamically inserted here -->
								<p>Loading...</p>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
							</div>
						</div>
					</div>
				</div>


				<!-- Modal for Viewing Order Details -->
				<div id="orderModal" class="modal">
					<div class="modal-content p-4">
						<span class="close-btn" style="cursor: pointer; font-size: 1.5rem;">&times;</span>
						<h2>Order Details</h2>
						<hr>
						<div id="orderDetails">
							<!-- Order details will be injected here -->
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Return Order Modal -->
	<div class="modal fade" id="orderModal" tabindex="-1" aria-labelledby="orderModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="orderModalLabel">Return Order Request</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<form id="returnOrderForm">
						<div class="mb-3">
							<label for="returnReason" class="form-label">Reason for Return</label>
							<textarea id="returnReason" class="form-control" rows="3" placeholder="State your reason here..." required></textarea>
						</div>
						<button type="submit" class="btn btn-success">Submit Request</button>
					</form>
				</div>
			</div>
		</div>
	</div>
	<!-- Footer -->
	<%- include('./layout/footer') %>
	<script>
		// View Order Modal
		document.querySelectorAll('.view-order-btn').forEach(button => {
			button.addEventListener('click', async (e) => {
				const orderId = e.target.dataset.id;
				const response = await fetch(`/order/${orderId}`);
				const order = await response.json();

				// Populate modal with order details
				let orderDetailsHTML = `<p><strong>Order ID:</strong> ${order.orderId}</p>
    <p><strong>Status:</strong> ${order.status}</p>
    <p><strong>Total Amount:</strong> Rs. ${order.totalAmount}</p>
    <p><strong>Payment Method:</strong> ${order.paymentMethod}</p>
    <p><strong>Payment Status:</strong> ${order.paymentStatus}</p>
    <h3>Items:</h3>
    <ul style="padding: 0;">`;

				order.orderItems.forEach(item => {
					orderDetailsHTML += `
					<li style="list-style: none; margin-bottom: 10px; border: 1px solid #ddd; padding: 10px; border-radius: 5px;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <img src="${item.productId.images[0]}" alt="${item.productId.name}" style="width: 60px; height: 80px; object-fit: cover; border-radius: 5px;">
                <div>
                    <p style="margin: 5px 0;"><strong>Product Name:</strong> ${item.productId.name}</p>
                    <p style="margin: 5px 0;"><strong>Quantity:</strong> ${item.quantity}</p>
                    <p style="margin: 5px 0;"><strong>Price:</strong> Rs. ${item.price}</p>
                </div>
            </div>
        </li>`;
				});

				orderDetailsHTML += '</ul>';
				document.getElementById('orderDetails').innerHTML = orderDetailsHTML;
				document.getElementById('orderModal').style.display = 'block';
			});
		});

		// Close Modal
		document.querySelector('.close-btn').addEventListener('click', () => {
			document.getElementById('orderModal').style.display = 'none';
		});

		// Cancel Order
		// Cancel Order
		document.querySelectorAll('.cancel-order-btn').forEach(button => {
			button.addEventListener('click', async (e) => {
				const orderId = e.target.dataset.id;

				// Display a confirmation dialog with input field for reason
				const result = await Swal.fire({
					title: 'Cancel Order',
					html: `
                <div class="form-group">
                    <label for="cancelReason" class="mb-2">Please provide a reason for cancellation:</label>
                    <textarea id="cancelReason" class="form-control" rows="3" placeholder="Enter your reason here"></textarea>
                </div>
            `,
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, cancel it!',
					cancelButtonText: 'No, keep it',
					preConfirm: () => {
						const reason = document.getElementById('cancelReason').value;
						if(!reason.trim()) {
							Swal.showValidationMessage('Please provide a reason for cancellation');
						}
						return reason;
					}
				});

				// If user confirms and provides a reason, proceed with canceling the order
				if(result.isConfirmed) {
					const cancelReason = result.value;

					try {
						const response = await fetch(`/order/cancel/${orderId}`, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
							body: JSON.stringify({
								reason: cancelReason
							})
						});

						const data = await response.json();

						if(data.message === 'Order cancelled successfully') {
							await Swal.fire({
								icon: 'success',
								title: 'Cancelled!',
								text: 'Order cancelled successfully',
								confirmButtonColor: '#28a745',
								confirmButtonText: 'OK'
							});
							location.reload(); // Reload the page to update order status
						} else {
							await Swal.fire({
								icon: 'error',
								title: 'Error!',
								text: 'Cannot cancel order',
								confirmButtonColor: '#d33',
								confirmButtonText: 'OK'
							});
						}
					} catch (error) {
						console.error('Error canceling order:', error);
						await Swal.fire({
							icon: 'error',
							title: 'Error!',
							text: 'An error occurred while canceling the order',
							confirmButtonColor: '#d33',
							confirmButtonText: 'OK'
						});
					}
				} else {
					// If the user cancels the action
					await Swal.fire({
						icon: 'info',
						title: 'Cancelled',
						text: 'The order was not cancelled.',
						confirmButtonColor: '#17a2b8',
						confirmButtonText: 'OK'
					});
				}
			});
		});

		// return the order
		// ----------------------------------------------------------------

		let currentOrderId = null; // To store the current order ID

		document.querySelectorAll('.return-order-btn').forEach(button => {
			button.addEventListener('click', () => {
				currentOrderId = button.getAttribute('data-id'); // Store the order ID
				const returnOrderModal = new bootstrap.Modal(document.getElementById('orderModal'));
				returnOrderModal.show(); // Open the modal
			});
		});

		// Handle form submission inside the modal
		document.getElementById('returnOrderForm').addEventListener('submit', async (e) => {
			e.preventDefault();

			const returnReason = document.getElementById('returnReason').value; // Get reason input


			try {
				// Send a request to the server to process the return request
				const response = await fetch(`/order/return/${currentOrderId}`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						reason: returnReason
					}) // Send reason to server
				});

				const result = await response.json(); // Parse the response

				if(response.ok) {
					Swal.fire({
						title: 'Success!',
						text: 'Your return request has been submitted!',
						icon: 'success',
						confirmButtonText: 'OK'
					});

					// Close the modal and disable the button
					const modal = bootstrap.Modal.getInstance(document.getElementById('orderModal'));
					modal.hide();
					document.querySelector(`[data-id="${currentOrderId}"]`).textContent = "Requested";
					document.querySelector(`[data-id="${currentOrderId}"]`).disabled = true;
				} else {
					Swal.fire({
						title: 'Failed!',
						text: `Failed to submit return request: ${result.message}`,
						icon: 'error',
						confirmButtonText: 'Try Again'
					});
				}
			} catch (error) {
				console.error("Error submitting return request:", error);
				Swal.fire({
					title: 'Error!',
					text: "Something went wrong. Please try again later.",
					icon: 'error',
					confirmButtonText: 'Close'
				});
			}
		});
	</script>

	<script>
		document.querySelectorAll('.retry-order-btn').forEach(button => {
			button.addEventListener('click', async (e) => {
				const orderId = e.target.dataset.id; // Get the order ID from the button's data attribute

				try {
					// Fetch the order details from the server to retry the payment
					const orderResponse = await fetch(`/retry-payment/${orderId}`);
					const {
						success,
						razorpayKey,
						razorpayOrderId,
						amount
					} = await orderResponse.json();

					if(!success) {
						Swal.fire("Error", "Unable to fetch order details for retrying payment.", "error");
						return;
					}

					const razorpayOptions = {
						key: razorpayKey,
						amount: amount * 100, // Amount in paise
						currency: "INR",
						order_id: razorpayOrderId,
						name: "HELDEN International",
						description: "Retry Payment",
						handler: async function(response) {
							try {
								// On successful payment, update the order status on the server
								const updateResponse = await fetch('/confirm-retry', {
									method: 'POST',
									headers: {
										'Content-Type': 'application/json'
									},
									body: JSON.stringify({
										orderId,
										razorpayPaymentId: response.razorpay_payment_id
									})
								});

								const result = await updateResponse.json();

								if(result.success) {
									Swal.fire("Success", "Payment retried successfully!", "success").then(() => {
										window.location.href = '/successPage'; // Redirect to success page
									});
								} else {
									Swal.fire("Error", "Failed to update payment status. Contact support.", "error");
								}
							} catch (error) {
								console.error("Error confirming retry payment:", error);
								Swal.fire("Error", "Something went wrong. Try again later.", "error");
							}
						},
						prefill: {
							name: "<%= user.name %>",
							email: "<%= user.email %>",
						}
					};

					const rzp = new Razorpay(razorpayOptions);

					rzp.on('payment.failed', function(response) {
						Swal.fire("Payment Failed", "Retry payment failed. Please try again.", "error");
					});

					rzp.open(); // Open Razorpay payment modal
				} catch (error) {
					console.error("Error retrying payment:", error);
					Swal.fire("Error", "Failed to retry payment. Try again later.", "error");
				}
			});
		});
	</script>

	<!--===============================================================================================-->
	<script src="/users/vendor/jquery/jquery-3.2.1.min.js"></script>
	<!--===============================================================================================-->
	<script src="/users/vendor/animsition/js/animsition.min.js"></script>
	<script src="/users/js/main.js"></script>
	<!--===============================================================================================-->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert CDN -->
</body>

</html>